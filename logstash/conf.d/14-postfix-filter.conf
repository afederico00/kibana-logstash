filter {
    # postfix details
    if [syslog_program] =~ /^postfix.*\/smtpd$/ {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_SMTPD}" }
      }
    } else if [syslog_program] == "postfix/smtp"
           or [syslog_program] == "postfix/lmtp"
           or [syslog_program] == "postfix/local" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_SMTP}" }
      }
    } else if [syslog_program] == "postfix/bounce" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_BOUNCE}" }
      }
    } else if [syslog_program] == "postfix/qmgr" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_QMGR}" }
      }
    } else if [syslog_program] == "postfix/anvil" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_ANVIL}" }
      }
    } else if [syslog_program] == "postfix/cleanup" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_CLEANUP}" }
      }
    } else if [syslog_program] == "postfix/dnsblog" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_DNSBLOG}" }
      }
    } else if [syslog_program] == "postfix/master" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_MASTER}" }
      }
    } else if [syslog_program] == "postfix/pickup" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_PICKUP}" }
      }
    } else if [syslog_program] == "postfix/pipe" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_PIPE}" }
      }
    } else if [syslog_program] == "postfix/postdrop" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_POSTDROP}" }
      }
    } else if [syslog_program] == "postfix/postscreen" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_POSTSCREEN}" }
      }
    } else if [syslog_program] == "postfix/sendmail" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_SENDMAIL}" }
      }
    } else if [syslog_program] == "postfix/tlsmgr" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_TLSMGR}" }
      }
    } else if [syslog_program] == "postfix/tlsproxy" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_TLSPROXY}" }
      }
    } else if [syslog_program] == "postfix/trivial-rewrite" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_TRIVIAL_REWRITE}" }
      }
    }

    if [syslog_program] =~ /^postfix.*\// {
      mutate {
        replace => { "type" => "postfix" }
      }
      # process key-value data is it exists
      if [postfix_keyvalue_data] {
        kv {
          source => "postfix_keyvalue_data"
          include_keys => [ "act", "addr", "class", "client", "conn_use", "delay", "delays", "delim", "depth", "dest", "dest_label", "dest_prop", "domain", "dsn", "dsn_orig", "dsn_ret", "encoding", "endp", "endp_label", "endp_prop", "envid", "family", "fd", "features", "filter", "flags", "from", "func", "helo", "host", "id", "ident", "key", "map", "message-id", "name", "notif", "nrcpt", "num", "off", "orig_id", "orig_to", "pattern", "port", "probed", "prop", "proto", "queue", "rcpt", "realm", "reply", "resent-message-id", "relay", "result", "ret", "score", "sender", "server_flags", "service", "size", "sock", "stat", "status", "stream", "subject", "table", "text", "to", "transp", "uid", "updated", "used", "val", "value", "verify", "weight", "why" ]
          trim => "<>,"
          prefix => "postfix_"
          remove_field => [ "postfix_keyvalue_data" ]
        }
        # some post processing of key-value data
        if [postfix_client] {
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "postfix_client" => "%{POSTFIX_CLIENT_INFO}" }
            tag_on_failure => [ "_grok_kv_postfix_client_nomatch" ]
            remove_field => [ "postfix_client" ]
          }
        }
        if [postfix_relay] {
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "postfix_relay" => "%{POSTFIX_RELAY_INFO}" }
            tag_on_failure => [ "_grok_kv_postfix_relay_nomatch" ]
            remove_field => [ "postfix_relay" ]
          }
        }
        if [postfix_delays] {
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "postfix_delays" => "%{POSTFIX_DELAYS}" }
            tag_on_failure => [ "_grok_kv_postfix_delays_nomatch" ]
            remove_field => [ "postfix_delays" ]
          }
        }
        if [postfix_from] == "" {
          mutate {
            replace => { "postfix_from" => "NULL" }
          }
        }
      }
      # Do some key-value data type conversions & check grok data type conversion bug???
      mutate {
        convert => {
          "postfix_nrcpt" => "integer"
          "postfix_size" => "integer"
          "postfix_uid" => "integer"
          "postfix_client_port" => "integer"
          "postfix_relay_port" => "integer"
          "postfix_server_port" => "integer"
          "postfix_status_code" => "integer"
          "postfix_postscreen_dnsbl_rank" => "integer"
          "postfix_postscreen_cache_retained" => "integer"
          "postfix_postscreen_cache_dropped" => "integer"
          "postfix_postscreen_violation_time" => "integer"
          "postfix_anvil_conn_rate" => "integer"
          "postfix_anvil_cache_size" => "integer"
          "postfix_anvil_conn_count" => "integer"
          "postfix_termination_signal" => "integer"
          "postfix_scache_hits" => "integer"
          "postfix_scache_miss" => "integer"
          "postfix_scache_success" => "integer"
          "postfix_scache_domains" => "integer"
          "postfix_scache_addresses" => "integer"
          "postfix_scache_connection" => "integer"
          "postfix_delay" => "float"
          "postfix_delay_before_qmgr" => "float"
          "postfix_delay_in_qmgr" => "float"
          "postfix_delay_conn_setup" => "float"
          "postfix_delay_transmission" => "float"
        }
      }
      if [postfix_client_ip] and [postfix_client_ip] != "unknown" {
        # testing private plugin : https://github.com/nxhack/logstash-filter-geoasn/tree/GeoIP_Legacy
        geoip {
		  add_tag => [ "geoip" ]
          source => "postfix_client_ip"
          target => "geoip"
		  database => "/etc/logstash/GeoLiteCity.dat"
		  add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
		mutate {
			convert => [ "[geoip][coordinates]", "float"]
		}
		if ("_grokparsefailure" in [tags]) {
            mutate {
                add_tag => [ "geoip_parsefailure" ]
                remove_tag => [ "_grokparsefailure" ]
            }
        }
        # CTL NY1 US East : New York
		#if [zimbra_account_ip] =~ /^10\.73\./ {
		#  mutate { replace      => { "[zimbra_geoip][timezone]"         => "America/New_York" } }
		#  mutate { replace      => { "[zimbra_geoip][country_name]"     => "United States" } }
		#  mutate { replace      => { "[zimbra_geoip][country_code2]"    => "US" } }
		#  mutate { replace      => { "[zimbra_geoip][country_code3]"    => "USA" } }
		#  mutate { replace      => { "[zimbra_geoip][area_code]"        => "703" } }
		#  mutate { convert      => { "[zimbra_geoip][area_code]"        => "integer" } }
		#  mutate { replace      => { "[zimbra_geoip][city_name]"        => "Ashburn" } }
		#  mutate { replace      => { "[zimbra_geoip][continent_code]"   => "NA" } }
		#  mutate { replace      => { "[zimbra_geoip][dma_code]"         => "511" } }
		#  mutate { convert      => { "[zimbra_geoip][dma_code]"         => "integer" } }
		#  mutate { replace      => { "[zimbra_geoip][ip]"               => "%{zimbra_account_ip}" } }
		#  mutate { replace      => { "[zimbra_geoip][postal_code]"      => "20147" } }
		#  mutate { replace      => { "[zimbra_geoip][real_region_name]" => "Virginia" } }
		#  mutate { replace      => { "[zimbra_geoip][region_name]"      => "VA" } }
		#  mutate { replace      => { "[zimbra_geoip][latitude]"         => "39.044" } }
		#  mutate { convert      => { "[zimbra_geoip][latitude]"         => "float" } }
		#  mutate { replace      => { "[zimbra_geoip][longitude]"        => "-77.4875" } }
		#  mutate { convert      => { "[zimbra_geoip][longitude]"        => "float" } }
		#  mutate { replace      => { "[zimbra_geoip][location]"         => "-77.4875, 39.044" } }
		#}
      }
      # in case of unknown[unknown] issue
      if [postfix_client_ip] == "unknown" {
        mutate {
          remove_field => [ "postfix_client_ip" ]
        }
      }
    }

}