filter {
  # zimbra /opt/zimbra/log/audit.log  	
  if [type] == "zimbra_audit" {
    grok {
        patterns_dir => ["/etc/logstash/patterns/"]
        match => ["message", "%{ZMAUDIT}"]
        add_tag => ["audit"]
        remove_tag => [ "unknown" ]
    }
	#audit src_ip
	if [src_ip] {
        geoip {
          add_tag => [ "geoip" ]
          source => "src_ip"
          target => "geoip"
		  database => "/etc/logstash/GeoLiteCity.dat"
        }
		mutate {
			convert => [ "[geoip][coordinates]", "float"]
		}
		if ("_grokparsefailure" in [tags]) {
            mutate {
                add_tag => [ "geoip_parsefailure" ]
                remove_tag => [ "_grokparsefailure" ]
            }
        }
    }
	# audit clientip
	if [clientip] {
        geoip {
          add_tag => [ "geoip" ]
          source => "clientip"
          target => "geoip"
		  database => "/etc/logstash/GeoLiteCity.dat"
        }
		mutate {
			convert => [ "[geoip][coordinates]", "float"]
		}
		if ("_grokparsefailure" in [tags]) {
            mutate {
                add_tag => [ "geoip_parsefailure" ]
                remove_tag => [ "_grokparsefailure" ]
            }
        }
    }
  }
  # zimbra /var/log/zimbra.log (syslog format) use amavisd, clamd, opendkim logs only.
  if [type] == "zimbralog" {
    grok {
      match => { "message" => "(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => {
        "syslog_received_at" => "%{@timestamp}"
        "syslog_received_from" => "%{host}"
      }
    }
    syslog_pri {
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
	  timezone => "UTC"
    }
    mutate {
      replace => { "syslog_timestamp" => "%{@timestamp}" }
    }
    # for check grok data type conversion bug???
    mutate {
      convert => {
        "syslog_pid" => "integer"
      }
    }
	# auth.log
    if [syslog_program] == "saslauthd" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => [ "message", "%{SALSRESULT}" ]
		add_tag => [ "result" ]
		remove_tag => [ "unknown" ]
      }
    }	
    if [syslog_program] == "amavis" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{AMAVIS}" }
      }
      mutate {
        replace => { "type" => "amavis" }
      }
      # for check grok data type conversion bug???
      mutate {
        convert => {
          "amavis_relay_port" => "integer"
          "amavis_size" => "integer"
          "amavis_delay" => "integer"
          "amavis_hits" => "float"
        }
      }
      if [amavis_relay_ip] {
        # testing private plugin : https://github.com/nxhack/logstash-filter-geoasn/tree/GeoIP_Legacy
        #geoasn {
        #  database => "/etc/logstash/GeoIPASNum.dat"
        #  source => "amavis_relay_ip"
        #  target => "amavis_bgp"
        #}
        geoip {
          add_tag => [ "geoip" ]
          source => "amavis_relay_ip"
          target => "geoip"
		  database => "/etc/logstash/GeoLiteCity.dat"
        }
		mutate {
			convert => [ "[geoip][coordinates]", "float"]
		}
		if ("_grokparsefailure" in [tags]) {
            mutate {
                add_tag => [ "geoip_parsefailure" ]
                remove_tag => [ "_grokparsefailure" ]
            }
        }
        # AWS us-east-1 : Virginia
		# CTL NY1 US East : New York
		#if [zimbra_account_ip] =~ /^10\.73\./ {
		#  mutate { replace      => { "[zimbra_geoip][timezone]"         => "America/New_York" } }
		#  mutate { replace      => { "[zimbra_geoip][country_name]"     => "United States" } }
		#  mutate { replace      => { "[zimbra_geoip][country_code2]"    => "US" } }
		#  mutate { replace      => { "[zimbra_geoip][country_code3]"    => "USA" } }
		#  mutate { replace      => { "[zimbra_geoip][area_code]"        => "703" } }
		#  mutate { convert      => { "[zimbra_geoip][area_code]"        => "integer" } }
		#  mutate { replace      => { "[zimbra_geoip][city_name]"        => "Ashburn" } }
		#  mutate { replace      => { "[zimbra_geoip][continent_code]"   => "NA" } }
		#  mutate { replace      => { "[zimbra_geoip][dma_code]"         => "511" } }
		#  mutate { convert      => { "[zimbra_geoip][dma_code]"         => "integer" } }
		#  mutate { replace      => { "[zimbra_geoip][ip]"               => "%{zimbra_account_ip}" } }
		#  mutate { replace      => { "[zimbra_geoip][postal_code]"      => "20147" } }
		#  mutate { replace      => { "[zimbra_geoip][real_region_name]" => "Virginia" } }
		#  mutate { replace      => { "[zimbra_geoip][region_name]"      => "VA" } }
		#  mutate { replace      => { "[zimbra_geoip][latitude]"         => "39.044" } }
		#  mutate { convert      => { "[zimbra_geoip][latitude]"         => "float" } }
		#  mutate { replace      => { "[zimbra_geoip][longitude]"        => "-77.4875" } }
		#  mutate { convert      => { "[zimbra_geoip][longitude]"        => "float" } }
		#  mutate { replace      => { "[zimbra_geoip][location]"         => "-77.4875, 39.044" } }
		#}
        #mutate {
        #  add_field => { "amavis_relay_hostname" => "%{amavis_relay_ip}" }
        #}
        #dns {
        #  reverse => [ "amavis_relay_hostname" ]
        #  action => "replace"
        #}
      }
	} 
  } 
}